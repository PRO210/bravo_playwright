/**
 * Fun√ß√£o para encontrar e interagir com o link "INFORMAR" de um aluno na lista de alunos dos sem INEP.
 *
 * @param {string} nomeDoAluno - O nome completo do aluno a ser buscado (usado apenas para logs).
 * @param {string} MAE - O nome completo da M√ÉE do aluno a ser buscado (crit√©rio principal de busca).
 * @param {string} NASC - Data de nascimento do aluno (n√£o utilizada na l√≥gica atual, mas mantida para conformidade com a assinatura original).
 * @param {import('playwright').Page} page - A inst√¢ncia da p√°gina principal do Playwright.
 * @returns {Promise<{status: string, mensagem: string}|null>} Um objeto com o status da opera√ß√£o e uma mensagem, ou null em caso de erro cr√≠tico inicial.
 */
export async function preencherInep(nomeDoAluno, MAE, NASC, page) {
  // Define as URLs e seletores utilizados na fun√ß√£o
  const urlListaAlunos = 'https://web02.sipf.com.br/sipfalpha/Escolav3/Index/0/107';
  const vejaAListaSelector = 'a.btn.btn-danger.btn-block[href="https://web02.sipf.com.br/sipfalpha/Escolav3/Index/0/107"]';
  const tabelaAlunosSelector = '#DataTables_Table_0';

  console.log(`[PASSO 1/9] üîé Tentando acessar a lista de alunos para "${nomeDoAluno}" (m√£e: "${MAE}")...`);

  try {
    // Tenta clicar no bot√£o "VEJA A LISTA" para navegar at√© a p√°gina de listagem.
    console.log('[PASSO 2/9] Tentando clicar no bot√£o "VEJA A LISTA"...');
    await page.click(vejaAListaSelector, { timeout: 5000 });
    // Aguarda o carregamento do DOM ap√≥s o clique.
    await page.waitForLoadState('domcontentloaded');
    console.log('‚úÖ [PASSO 2/9] Bot√£o "VEJA A LISTA" clicado com sucesso.');
  } catch (error) {
    // Se o bot√£o n√£o for encontrado ou houver erro no clique, navega diretamente para a URL da lista.
    console.warn('‚ö†Ô∏è [PASSO 2/9] Bot√£o "VEJA A LISTA" n√£o encontrado ou erro ao clicar. Navegando diretamente para a URL da lista...');
    await page.goto(urlListaAlunos, { waitUntil: 'domcontentloaded' });
  }

  // Garante que a tabela de alunos esteja presente na p√°gina antes de prosseguir.
  console.log('[PASSO 3/9] Aguardando o carregamento da tabela de alunos...');
  await page.waitForSelector(tabelaAlunosSelector);
  // Aguarda que a rede esteja inativa para garantir que todos os dados da tabela foram carregados.
  await page.waitForLoadState('networkidle');
  console.log('‚úÖ [PASSO 3/9] Tabela de alunos carregada.');

  console.log(`[PASSO 4/9] Buscando aluno "${nomeDoAluno}" na tabela usando o nome da m√£e: "${MAE}"...`);

  // Seletor XPath para encontrar o bot√£o "INFORMAR" associado √† m√£e correta.
  // Ele busca uma c√©lula de tabela (<td>) que cont√©m um <strong> com o texto "Nome da m√£e:"
  // E que, dentro dessa mesma <td>, contenha o nome da m√£e espec√≠fico.
  // Dentro dessa <td>, ele procura o link <a> com as classes 'btn-info' e o texto "INFORMAR".
  const linkInformarSelector = `//td[
    ./strong[contains(text(), "Nome da m√£e:")] and
    ./text()[contains(., "${MAE}")]
  ]//a[contains(@class, "btn-info") and contains(text(), "INFORMAR")]`;

  let novaPagina; // Vari√°vel para a nova p√°gina/aba, declarada aqui para ser acess√≠vel no bloco catch.

  try {
    console.log(`[PASSO 5/9] Clicando no bot√£o "INFORMAR" para o aluno com m√£e "${MAE}" e aguardando nova aba...`);
    // Usa Promise.all para esperar por dois eventos simultaneamente:
    // 1. Abertura de uma nova p√°gina (aba/janela).
    // 2. O clique no link que dispara essa nova p√°gina.
    [novaPagina] = await Promise.all([
      page.context().waitForEvent('page'), // Espera por um evento de cria√ß√£o de nova 'page' (aba/janela).
      page.click(linkInformarSelector)     // Clica no link que dispara a abertura da nova aba.
    ]);

    console.log(`‚úîÔ∏è [PASSO 5/9] Nova janela/aba aberta com URL: ${novaPagina.url()}`);

    // √â crucial esperar que a nova p√°gina carregue completamente antes de interagir com ela.
    console.log('[PASSO 6/9] Aguardando o carregamento completo da nova janela/aba...');
    await novaPagina.waitForLoadState('networkidle'); // Garante que todos os recursos foram carregados.
    console.log('‚úÖ [PASSO 6/9] Nova janela/aba carregada completamente.');

    // --- A√á√ïES NA NOVA JANELA/ABA ---
    // Este √© o local onde voc√™ adicionaria a l√≥gica para interagir com a nova p√°gina.
    // O c√≥digo original tinha l√≥gica comentada para preencher INEP e salvar.
    // Por exemplo, para preencher um campo e clicar em um bot√£o:
    // console.log("Preenchendo campo INEP na nova janela...");
    // const inepInputSelector = 'input[name="registros_cod_inep"]';
    // await novaPagina.waitForSelector(inepInputSelector, { state: 'visible' });
    // await novaPagina.fill(inepInputSelector, INEP_DO_ALUNO); // Substitua INEP_DO_ALUNO pelo valor real
    // console.log(`INEP "${INEP_DO_ALUNO}" preenchido.`);

    // console.log("Clicando no bot√£o 'SALVAR ALTERA√á√ÉO' na nova janela...");
    // const salvarButtonSelector = 'button[type="submit"].btn.btn-lg.btn-info:has-text("SALVAR ALTERA√á√ÉO")';
    // await novaPagina.waitForSelector(salvarButtonSelector, { state: 'visible' });
    // await novaPagina.click(salvarButtonSelector);
    // console.log("Bot√£o 'SALVAR ALTERA√á√ÉO' clicado.");

    // Aguarda um tempo fixo (3 segundos) para qualquer processamento p√≥s-intera√ß√£o na nova p√°gina.
    console.log('[PASSO 7/9] Aguardando 3 segundos para estabiliza√ß√£o da nova p√°gina...');
    await novaPagina.waitForTimeout(3000);
    console.log('‚úÖ [PASSO 7/9] Tempo de espera na nova p√°gina conclu√≠do.');

    // --- FECHAR A NOVA JANELA/ABA ---
    console.log('[PASSO 8/9] Fechando a nova janela/aba...');
    await novaPagina.close(); // Fecha a aba rec√©m-aberta.
    console.log('‚úÖ [PASSO 8/9] Nova janela/aba fechada.');

    console.log(`[PASSO 9/9] Retornou para a janela original: ${page.url()}`);
    return { status: 'sucesso', mensagem: 'Intera√ß√£o com detalhes do aluno conclu√≠da e janela fechada com sucesso.' };

  } catch (error) {
    console.error(`‚ùå [ERRO] Erro ao interagir com a nova janela para o aluno "${nomeDoAluno}" (m√£e "${MAE}"). Erro: ${error.message}`);
    // Se a nova p√°gina foi aberta, mas houve um erro, tenta fech√°-la para evitar abas √≥rf√£s.
    if (novaPagina && !novaPagina.isClosed()) {
      console.warn('[ERRO] Tentando fechar a nova janela/aba devido ao erro...');
      await novaPagina.close();
      console.warn('[ERRO] Nova janela/aba fechada ap√≥s erro.');
    }
    return { status: 'erro', mensagem: error.message };
  }
}